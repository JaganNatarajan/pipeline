{"0": {
    "doc": "Customization",
    "title": "Customization",
    "content": " ",
    "url": "http://localhost:4000/docs/2022-09-03-welcome-to-jekyll.html",
    "relUrl": "/docs/2022-09-03-welcome-to-jekyll.html"
  },"1": {
    "doc": "Home",
    "title": "Purpose of this documentation",
    "content": "The purpose of this documentation is to install, configure and build a Z DevOps pipeline. The tools that would installed / configured are . | Rocket Git for z/OS | IBM Dependency Based Build (DBB) | Jenkins | IBM Developer for Z (IDZ) | Buildframe work - zAppBuild | Rational License Key Manager | Urban Code Deploy (UCD) | . ",
    "url": "http://localhost:4000/#purpose-of-this-documentation",
    "relUrl": "/#purpose-of-this-documentation"
  },"2": {
    "doc": "Home",
    "title": "Rocket Git for z/OS",
    "content": "Rocket Software’s port of GIT SCM for z/OS. One key step in the enterprise DevOps solution for z/OS is to migrate the source control from the legacy source control tools to the latest ones. One option would be to align the mainframe with the enterprise wide source control tools. The most popular one in this space is GIT. Rocket’s GIT for z/OS runs on the Unix System Services (USS) on the z/OS . ",
    "url": "http://localhost:4000/#rocket-git-for-zos",
    "relUrl": "/#rocket-git-for-zos"
  },"3": {
    "doc": "Home",
    "title": "IBM Dependency Based Build (DBB)",
    "content": "Traditionally, mainframe source control tools also were also used as the build &amp; deploy tools. This severly restricted the number of test environments that were available for testing. With agile and parallel developments, the need for test environments increased - calling for a standalone build and deploy processes. IBM Dependency Based Build (DBB), is a build module for mainframe application that runs on the USS on z/OS and comes with a groovy based build framework - zAppBuild . ",
    "url": "http://localhost:4000/#ibm-dependency-based-build-dbb",
    "relUrl": "/#ibm-dependency-based-build-dbb"
  },"4": {
    "doc": "Home",
    "title": "Jenkins",
    "content": "The most popular Continous Integration (CI) orchestrator on the distributed environments is used to orchestrate the pipeline for the mainframes. There are two components to Jenkins - the server, that runs on a Linux hardware and talks to an agent on USS . ",
    "url": "http://localhost:4000/#jenkins",
    "relUrl": "/#jenkins"
  },"5": {
    "doc": "Home",
    "title": "IBM Developer for Z (IDZ)",
    "content": "Developers are moving from mainframe ISPF screens to modern IDEs for development. One of the modern IDE for the mainframe is the IBM Developer for Z (IDZ). ",
    "url": "http://localhost:4000/#ibm-developer-for-z-idz",
    "relUrl": "/#ibm-developer-for-z-idz"
  },"6": {
    "doc": "Home",
    "title": "Buildframe work - zAppBuild",
    "content": " ",
    "url": "http://localhost:4000/#buildframe-work---zappbuild",
    "relUrl": "/#buildframe-work---zappbuild"
  },"7": {
    "doc": "Home",
    "title": "Rational License Key Manager",
    "content": " ",
    "url": "http://localhost:4000/#rational-license-key-manager",
    "relUrl": "/#rational-license-key-manager"
  },"8": {
    "doc": "Home",
    "title": "Urban Code Deploy (UCD)",
    "content": "Urban Code Deploy (UCD) is one of the most popular deploy tools in the market. UCD is used to deploy mainframe components on z/OS . Document v1.0 3 Sep 2022 . ",
    "url": "http://localhost:4000/#urban-code-deploy-ucd",
    "relUrl": "/#urban-code-deploy-ucd"
  },"9": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },"10": {
    "doc": "Installation Components",
    "title": "Installation Components",
    "content": "The earlier section, gave an overview of the different tools that make up the pipeline for z/OS. Here and the next sections, we will see the different components of the tools (server / agent), where they are installed (desktop, Linux or USS), the prerequisites and how they interact with each other . | the different components of the tool - agent / server | where it needs to be installed - deskptop / Linux server / USS | prerequisites for the installation | the communication channels between the tools - ports | . | Product | Installed on | Download | . | Git for z/OS | USS on z/OS |   | . | IBM Dependency Based Build | USS on z/OS |   | . | IBM zAppBuild Groovy scripts | USS on z/OS |   | . | Jenkins - Server | Linux |   | . | Jenkins - agent | USS on z/OS |   | . | IBM Developer for Z | Windows /Mac |   | . | Urban Code Deploy - server | Linux |   | . | Urban Code Deploy - agent | USS on z/OS |   | . | Rational License Key Manger | Linux |   | . ",
    "url": "http://localhost:4000/install_components.html",
    "relUrl": "/install_components.html"
  },"11": {
    "doc": "Navigation Structure",
    "title": "Navigation Structure",
    "content": ". | Main navigation | Ordering pages | Excluding pages | Pages with children . | Child pages | Ordering child pages | Auto-generating Table of Contents | Children with children | . | Auxiliary Links | External Navigation Links . | Example | . | In-page navigation with Table of Contents . | Collapsible Table of Contents | . | . ",
    "url": "http://localhost:4000/navigation-structure.html",
    "relUrl": "/navigation-structure.html"
  },"12": {
    "doc": "Navigation Structure",
    "title": "Main navigation",
    "content": "The main navigation for your Just the Docs site is on the left side of the page at large screens and on the top (behind a tap) on small screens. The main navigation can be structured to accommodate a multi-level menu system (pages with children and grandchildren). By default, all pages will appear as top level pages in the main nav unless a parent page is defined (see Pages with Children). ",
    "url": "http://localhost:4000/navigation-structure.html#main-navigation",
    "relUrl": "/navigation-structure.html#main-navigation"
  },"13": {
    "doc": "Navigation Structure",
    "title": "Ordering pages",
    "content": "To specify a page order, you can use the nav_order parameter in your pages’ YAML front matter. Example . --- layout: default title: Customization nav_order: 4 --- . The parameter values determine the order of the top-level pages, and of child pages with the same parent. You can reuse the same parameter values (e.g., integers starting from 1) for the child pages of different parents. The parameter values can be numbers (integers, floats) and/or strings. When you omit nav_order parameters, they default to the titles of the pages, which are ordered alphabetically. Pages with numerical nav_order parameters always come before those with strings or default nav_order parameters. If you want to make the page order independent of the page titles, you can set explicit nav_order parameters on all pages. By default, all Capital letters come before all lowercase letters; you can add nav_sort: case_insensitive in the configuration file to ignore the case. Enclosing strings in quotation marks is optional. Note for users of previous versions: nav_sort: case_insensitive previously affected the ordering of numerical nav_order parameters: e.g., 10 came before 2. Also, all pages with explicit nav_order parameters previously came before all pages with default parameters. Both were potentially confusing, and they have now been eliminated. ",
    "url": "http://localhost:4000/navigation-structure.html#ordering-pages",
    "relUrl": "/navigation-structure.html#ordering-pages"
  },"14": {
    "doc": "Navigation Structure",
    "title": "Excluding pages",
    "content": "For specific pages that you do not wish to include in the main navigation, e.g. a 404 page or a landing page, use the nav_exclude: true parameter in the YAML front matter for that page. Example . --- layout: default title: 404 nav_exclude: true --- . The nav_exclude parameter does not affect the auto-generating list of child pages, which you can use to access pages excluded from the main navigation. Pages with no title are automatically excluded from the navigation. ",
    "url": "http://localhost:4000/navigation-structure.html#excluding-pages",
    "relUrl": "/navigation-structure.html#excluding-pages"
  },"15": {
    "doc": "Navigation Structure",
    "title": "Pages with children",
    "content": "Sometimes you will want to create a page with many children (a section). First, it is recommended that you keep pages that are related in a directory together… For example, in these docs, we keep all of the written documentation in the ./docs directory and each of the sections in subdirectories like ./docs/ui-components and ./docs/utilities. This gives us an organization like: . +-- .. |-- (Jekyll files) |-- docs |-- ui-components | |-- index.md (parent page) | |-- buttons.md | |-- code.md | |-- labels.md | |-- tables.md | +-- typography.md | |-- utilities | |-- index.md (parent page) | |-- color.md | |-- layout.md | |-- responsive-modifiers.md | +-- typography.md | |-- (other md files, pages with no children) | +-- .. |-- (Jekyll files) +-- .. On the parent pages, add this YAML front matter parameter: . | has_children: true (tells us that this is a parent page) | . Example . --- layout: default title: UI Components nav_order: 2 has_children: true --- . Here we’re setting up the UI Components landing page that is available at /docs/ui-components, which has children and is ordered second in the main nav. Child pages . On child pages, simply set the parent: YAML front matter to whatever the parent’s page title is and set a nav order (this number is now scoped within the section). Example . --- layout: default title: Buttons parent: UI Components nav_order: 2 --- . The Buttons page appears as a child of UI Components and appears second in the UI Components section. Ordering child pages . You can optionally add the following to the YAML front matter to change the default sort order of child pages from ascending to descending order: . | child_nav_order: desc | . Example . --- layout: default title: Descending Child Pages child_nav_order: desc --- . Auto-generating Table of Contents . By default, all pages with children will automatically append a Table of Contents which lists the child pages after the parent page’s content. To disable this auto Table of Contents, set has_toc: false in the parent page’s YAML front matter. Example . --- layout: default title: UI Components nav_order: 2 has_children: true has_toc: false --- . Children with children . Child pages can also have children (grandchildren). This is achieved by using a similar pattern on the child and grandchild pages. | Add the has_children attribute to the child | Add the parent and grand_parent attribute to the grandchild | . Example . --- layout: default title: Buttons parent: UI Components nav_order: 2 has_children: true --- . --- layout: default title: Buttons Child Page parent: Buttons grand_parent: UI Components nav_order: 1 --- . This would create the following navigation structure: . +-- .. |-- UI Components |-- .. | |-- Buttons | |-- Button Child Page | |-- .. | +-- .. ",
    "url": "http://localhost:4000/navigation-structure.html#pages-with-children",
    "relUrl": "/navigation-structure.html#pages-with-children"
  },"16": {
    "doc": "Navigation Structure",
    "title": "Auxiliary Links",
    "content": "Example . # Aux links for the upper right navigation aux_links: \"Just the Docs on GitHub\": - \"//github.com/just-the-docs/just-the-docs\" . ",
    "url": "http://localhost:4000/navigation-structure.html#auxiliary-links",
    "relUrl": "/navigation-structure.html#auxiliary-links"
  },"17": {
    "doc": "Navigation Structure",
    "title": "External Navigation Links",
    "content": "Example . # External navigation links nav_external_links: - title: Just the Docs on GitHub url: https://github.com/just-the-docs/just-the-docs hide_icon: false # set to true to hide the external link icon - defaults to false . ",
    "url": "http://localhost:4000/navigation-structure.html#external-navigation-links",
    "relUrl": "/navigation-structure.html#external-navigation-links"
  },"18": {
    "doc": "Navigation Structure",
    "title": "In-page navigation with Table of Contents",
    "content": "To generate a Table of Contents on your docs pages, you can use the {:toc} method from Kramdown, immediately after an &lt;ol&gt; in Markdown. This will automatically generate an ordered list of anchor links to various sections of the page based on headings and heading levels. There may be occasions where you’re using a heading and you don’t want it to show up in the TOC, so to skip a particular heading use the {: .no_toc } CSS class. Example . # Navigation Structure {: .no_toc } ## {: .no_toc .text-delta } 1. TOC {:toc} . This example skips the page name heading (#) from the TOC, as well as the heading for the Table of Contents itself (##) because it is redundant, followed by the table of contents itself. To get an unordered list, replace 1. TOC above by - TOC. Collapsible Table of Contents . The Table of Contents can be made collapsible using the &lt;details&gt; and &lt;summary&gt; elements , as in the following example. The attribute open (expands the Table of Contents by default) and the styling with {: .text-delta } are optional. &lt;details open markdown=\"block\"&gt; &lt;summary&gt; &lt;/summary&gt; {: .text-delta } 1. TOC {:toc} &lt;/details&gt; . The result is shown at the top of this page ({:toc} can be used only once on each page). ",
    "url": "http://localhost:4000/navigation-structure.html#in-page-navigation-with-table-of-contents",
    "relUrl": "/navigation-structure.html#in-page-navigation-with-table-of-contents"
  }
}
